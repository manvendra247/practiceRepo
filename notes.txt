ls -- to list the contents of the folder. 
cd -- to get into a directory. 
ls -a == to get the hidden files in the current directory.
git init  == to initialize a .git folder which stores all the history of the project.

touch {filename} == it is used to create a new file.

git status == it shows the changes made in the current directory.
// it also shows the untracked file in the directory. 
// untracked files are the files whose history is not maintained by git.

git add .      or    git add <file name> 
// used to bring the untracked files on stage to record their history.

git commit -m "message for the commit" // this makes git to click the picture of the
// files on stage by 'git add' command.

vim == it is used to edit text files quickly in the bash terminal itself.

 // we use insert to insert the text in the file 
 // :w  == command to save the file.
 // To save the file without exiting the editor, switch back to normal mode by pressing Esc,
 // type ':w' and hit Enter. 
 // ':x' -> to save and exit
 // press 'Esc', ':q!'  , and then 'Enter'.

cat <file_name> == show the contents of the file in the terminal.

git restore --staged <filename> == this commmand is used to take the out of stage
                                   // files which were stages using git add

git log  === it shows all the commit history of the current directory.

rm <file_name> == remove files  // rm alone can't remove a directory.

rm command in Linux is used to delete files.
rm -r command deletes the folder recursively, even the empty folder.
rm -f command removes ‘Read only File’ without asking.
rm -rf / : Force deletion of everything in root directory.
rm -rf * : Force deletion of everything in current directory/working directory.
rm -rf . : Force deletion of current folder and sub folders.

//when we do 'git log' we get all commits with their hash ID; each commit is built
on the top of the previous one so we can't delete any commit from the mid.

git reset <hash_code_of_last_commit_you_want_to_keep>  == to unstage the commit 
        // after a particular commit.

// if we need to store changes but we want to commit them later  altogether we use git stash.
// first do git add 
git stash == this brings all the added files to the backstage area.
                 // which can be commited later on 

vi <filename> == to create and edit a new file in the terminal

git stash clear == to clear the changes which were stashed earlier. 

git stash pop === to bring those backstage elements to the stage to make a commit.

git stash show == to see the stash entries.

// to connect a github repo to the current directory. 
git remote add origin <github_repoUrl>     // here origin denotes the name of the repo
     // by convention all the repositories in our personal account is named origin.
    // remote denotes that we are working with Urls

git remote -v === this gives a list of all the urls connected to the current dir.

git push origin   master == to push the changes on the github repo.
      <url_name> <branch_name>


// Branches. 
branches are used so that we do not directly commit into the main branch.
// because the code might contain some error.
// main branch contains the final codes.

// we can create a different branch using 
git branch <branch_name> 

git checkout <branch_name>   === to switch to a different branch .
// after doing this the head will be pointed to the new branch.
// Head is basically a pointer which points to the commits in a particular branch.
// now all the commits you do will be added in the current branch.


// if we want to contribute to some other person's repo we need to do 
// first fork the repo. == > It creates a copy of the project in your github.
// now you can changes if your copy , whatever you want and then you can ask the owner
   to accept the changes you made using a PR(pull request);
// then you need to clone the repo with your username (which you just forked).
// do 
git clone <url>    ==- it will be named as origin by default.

git remote add upstream <url>  === the url of original repo from where we have forked.

// ``we can use "start <url>" command to open a wepage directly from the terminal.``

''pull request''

we first make changes in our forked branch. then we ask for PR 
   // if we make a PR using the main branch all the changes pushed after will be 
  // added in the same PR.
 // So, avoid commit to main branch . it will add to the same PR. this will be
    difficult to review.
// create a new PR for every new feature or bug that you work on.
// never add many things in just 1 PR.
// we can add only PR with one branch.


//  to update the fork with the upstream changes: -
git checkout main
git fetch --all --prune   ==== to fetch the changes in the main branch.
git reset --hard upstream/main  === reset main branch of origin to the main branch
                                            of upstream.








